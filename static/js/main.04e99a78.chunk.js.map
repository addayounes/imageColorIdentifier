{"version":3,"sources":["Components/DisplayWindow/DisplayWindow.js","Components/ImageInput/Elements.js","Components/ImageInput/ImageInput.js","Components/ColorPreview/Elements.js","Components/ColorPreview/ColorPreview.js","Components/Button/Button.js","Components/RightContainer/RightContainer.js","App.js","index.js"],"names":["ErrorMessage","styled","div","DisplayWindow","text","Icon","className","Wrapper","props","imageLink","InputField","input","ImageInput","setImageLink","Success","Error","Copy","onChange","e","target","value","placeholder","type","AiFillWarning","AiOutlineCheck","ColorsContainer","displayed","Color","bgColor","ColorPreview","Colors","setCopy","Loading","CircularProgress","TransitionGroup","map","color","index","CSSTransition","classNames","timeout","onClick","Text","elem","document","createElement","body","appendChild","select","setSelectionRange","execCommand","removeChild","setTimeout","handleCopy","raw_hex","w3c","name","ActionButton","Button","handleGetColor","doItAgain","RContainer","RightContainer","Container","app","Clarifai","App","apiKey","process","useState","setColors","setSuccess","setError","setLoading","id","models","predict","then","response","rawData","outputs","data","colors","catch","error","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.04e99a78.chunk.js","sourcesContent":["import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nconst ErrorMessage = styled.div`\r\n    position: absolute;\r\n    background: white;\r\n    color: var(--main-clr);\r\n    padding: .4rem 1rem;\r\n    bottom: .5rem;\r\n    left: .5rem;\r\n    border-radius: 4px;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    transform: translateX(-100%);\r\n    animation: slide .1s ease-out forwards;\r\n    @keyframes slide {\r\n        to {\r\n            transform: translateX(0)\r\n        }\r\n    }\r\n    .icon {\r\n        font-size: 1.125rem;\r\n        margin-right: .5rem\r\n    }\r\n    \r\n    \r\n`\r\n\r\nconst DisplayWindow = ({text, Icon}) => {\r\n    return (\r\n        <>\r\n            <ErrorMessage>\r\n                <Icon className=\"icon\" /> \r\n                {text}\r\n            </ErrorMessage>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default DisplayWindow\r\n","import styled from 'styled-components'\r\n\r\nexport const Wrapper = styled.div`\r\n    background: var(--main-clr);\r\n    background-image: url(${props => props.imageLink});\r\n    background-repeat: no-repeat;\r\n    background-size: cover;\r\n    flex-basis: 70%;\r\n    width: 100%;\r\n    min-height: 400px;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    border-bottom-left-radius: 4px;\r\n    border-top-left-radius: 4px;\r\n    border: 2px solid var(--main-clr);\r\n    border-right: none;\r\n    position: relative;\r\n    overflow: hidden;\r\n`\r\n\r\nexport const InputField = styled.input`\r\n    padding: .5rem 1rem;\r\n    border: none;\r\n    border-radius: 2px;\r\n    opacity: .8;\r\n    width: min(350px, 75%);\r\n    &:focus,\r\n    &:hover {outline: none}\r\n\r\n`","import React from 'react'\r\nimport DisplayWindow from '../DisplayWindow/DisplayWindow'\r\nimport { Wrapper, InputField } from './Elements'\r\nimport { AiFillWarning, AiOutlineCheck } from \"react-icons/ai\"\r\n\r\nconst ImageInput = ({imageLink, setImageLink, Success, Error, Copy}) => {\r\n  \r\n    return (\r\n        <Wrapper imageLink={imageLink} Success={Success}>\r\n            {\r\n                Success &&\r\n                    <InputField\r\n                      onChange={e => setImageLink(e.target.value)}\r\n                      value={imageLink}\r\n                      placeholder=\"Enter Image URL\"\r\n                      type=\"text\"\r\n                    />\r\n             }\r\n             {\r\n                Error && \r\n                    <DisplayWindow\r\n                      text=\"Please enter a valid image URL\"\r\n                      Icon={AiFillWarning}\r\n                    />\r\n             }\r\n            {\r\n                Copy &&\r\n                      <DisplayWindow\r\n                        text=\"Copied to Clipboard\"\r\n                        Icon={AiOutlineCheck}\r\n                      />\r\n            }\r\n        </Wrapper>\r\n    )\r\n}\r\n\r\nexport default ImageInput\r\n","import styled from \"styled-components\"\r\n\r\nexport const ColorsContainer = styled.div`\r\n    flex-basis: 85%;\r\n    min-height:85%;\r\n    overflow-y: auto;\r\n    position: relative;\r\n    .progress {\r\n        color: var(--main-clr);\r\n        display: ${props => props.displayed ? \"block\" : \"none\"};\r\n        position: absolute;\r\n        left: 43.5%;\r\n        top: 47.5%;\r\n    }\r\n`\r\nexport const Color = styled.div`\r\n    display: flex;\r\n    justify-content: space-between;\r\n    border-radius: 4px;\r\n    padding: 0 1rem;\r\n    margin-bottom: .4125rem;\r\n    background: ${props => props.bgColor};\r\n    cursor: pointer;\r\n    &:hover {filter: brightness(1.15)}\r\n    .hex {text-transform: uppercase}\r\n`","import React from 'react'\r\nimport { ColorsContainer, Color } from './Elements'\r\nimport { CSSTransition, TransitionGroup } from 'react-transition-group'\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\n\r\n\r\nconst ColorPreview = ({Colors, setCopy, Loading}) => {\r\n\r\n    const handleCopy = (Text) => {\r\n        const elem = document.createElement('textarea')\r\n        elem.value = Text\r\n        document.body.appendChild(elem);\r\n        elem.select();\r\n        elem.setSelectionRange(0, 99999)\r\n        document.execCommand(\"copy\");\r\n        document.body.removeChild(elem);\r\n        setCopy(true)\r\n        setTimeout(\r\n            function() {\r\n                setCopy(false)\r\n            }\r\n        , 1500)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <ColorsContainer displayed={Loading}>\r\n                <CircularProgress className=\"progress\" />\r\n                <TransitionGroup>\r\n                {\r\n                    Colors.map((color, index) => {\r\n                        return(\r\n                            <CSSTransition classNames=\"color\" key={index} timeout={300}>\r\n                                <Color\r\n                                  onClick={() => handleCopy(color.raw_hex)}\r\n                                  bgColor={color.raw_hex}\r\n                                  >\r\n                                    <p className=\"hex\">{color.raw_hex}</p>\r\n                                    <p>{color.w3c.name}</p>\r\n                                </Color>\r\n                            </CSSTransition>\r\n                        )\r\n                    })\r\n                }\r\n                </TransitionGroup>\r\n            </ColorsContainer>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ColorPreview\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nconst ActionButton = styled.div`\r\n    width: 100%;\r\n    max-height: 14%;\r\n    padding: 1.125rem 0;\r\n    border: 2px solid var(--main-clr);\r\n    border-radius: 4px;\r\n    flex-basis: 15%;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    transition: .15s ease-out;\r\n    cursor: pointer;\r\n    text-transform: uppercase;\r\n    font-weight: 500;\r\n    color: var(--main-clr);\r\n    &:hover {\r\n        background: var(--main-clr);\r\n        color: white;\r\n        transition: .15s ease-out\r\n    }\r\n\r\n`\r\n\r\nconst Button = ({handleGetColor, Success, doItAgain}) => {\r\n    return (\r\n        <ActionButton onClick={Success ? handleGetColor : doItAgain}>\r\n            {\r\n            Success ? \"get colors\" : \"do it again\"\r\n            }\r\n        </ActionButton>\r\n    )\r\n}\r\n\r\nexport default Button\r\n","import React from 'react'\r\nimport ColorPreview from '../ColorPreview/ColorPreview'\r\nimport Button from '../Button/Button'\r\nimport styled from 'styled-components'\r\n\r\nconst RContainer = styled.div`\r\n    flex-basis: 30%;\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: space-between;\r\n    border: 2px solid var(--main-clr);\r\n    background: var(--secondary-clr);\r\n    max-height: 400px;\r\n    marigin-left: 20px;\r\n    border-bottom-right-radius: 4px;\r\n    border-top-right-radius: 4px;\r\n    padding: .4125rem;\r\n`\r\n\r\nconst RightContainer = ({handleGetColor, Success, doItAgain, Colors, setCopy, Loading}) => {\r\n    return (\r\n        <RContainer>\r\n            <ColorPreview\r\n              Loading={Loading}\r\n              setCopy={setCopy}\r\n              Colors={Colors}\r\n            />\r\n            <Button\r\n                Success={Success}\r\n                doItAgain={doItAgain}\r\n                handleGetColor={handleGetColor}\r\n            />\r\n        </RContainer>\r\n    )\r\n}\r\n\r\nexport default RightContainer\r\n","import { useState } from \"react\"\nimport styled from \"styled-components\"\nimport ImageInput from './Components/ImageInput/ImageInput'\nimport RightContainer from \"./Components/RightContainer/RightContainer\"\nimport Clarifai from \"clarifai\"\n\nconst Container = styled.div`\n  display: flex;\n  padding: .4125rem;\n  border: 2px solid var(--main-clr);\n  border-radius: 4px;\n  height: min(400px, 40%);\n  @media only screen and (max-width: 768px) {\n    flex-direction: column\n  }\n`\n\nconst app = new Clarifai.App({\n  apiKey: process.env.REACT_APP_API_KEY\n })\n\nfunction App() {\n  const [imageLink, setImageLink] = useState('')\n  const [Colors, setColors] = useState([])\n  const [Success, setSuccess] = useState(true)\n  const [Error, setError] = useState(false)\n  const [Copy, setCopy] = useState(false)\n  const [Loading, setLoading] = useState(false)\n\n  const handleGetColor = () => {\n    setLoading(true)\n    app.models.predict(\n      'eeed0b6733a644cea07cf4c60f87ebb7',\n      imageLink)\n      .then(response => {\n        setColors(response.rawData.outputs[0].data.colors)\n        setSuccess(false)\n        setError(false)\n        setLoading(false)\n      })\n      .catch(error => {\n        setError(true)\n        setSuccess(true)\n        setLoading(false)\n        setTimeout(\n          function() {\n              setError(false)\n          }\n      , 1500)\n      })\n  }\n  const doItAgain = () => {\n    setImageLink(\"\")\n    setColors([])\n    setSuccess(true)\n    setError(false)\n  }\n  \n  return (\n    <Container id=\"container\">\n      <ImageInput\n        Copy={Copy}\n        Error={Error}\n        Success={Success}\n        imageLink={imageLink}\n        setImageLink={setImageLink}\n      />\n      <RightContainer \n        Loading={Loading}\n        setCopy={setCopy}\n        Success={Success} \n        handleGetColor={handleGetColor}\n        doItAgain={doItAgain}\n        Colors={Colors}\n      />\n    </Container>\n  );\n}\n\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}